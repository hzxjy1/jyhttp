module;
#include <iostream>
#include <ostream>
#include <optional>
#include <string>
#include "jyhttp.hpp"

export module JySockets;

export namespace JySockets {
class POSIXSocket : public Socket {
public:
  POSIXSocket();
  SOCKET_FD CreateSocket() override;
  std::string GetRawText() override;
  bool WriteOut() override;
};

POSIXSocket::POSIXSocket() {}

SOCKET_FD POSIXSocket::CreateSocket() {
  std::cout<<"Create socket"<<std::endl;
  return 1;
}

std::string POSIXSocket::GetRawText() {
  return "std::optional<std::string>()";
}

bool POSIXSocket::WriteOut() {
  return false;
}

std::optional<Socket *> GetSocket() {
#if defined(__linux__)
  return new POSIXSocket();
#elif defined(__APPLE__) && defined(__MACH__)
  return new POSIXSocket();
#elif defined(_WIN32) || defined(_WIN64)
  return std::nullopt;
#else
  return std::nullopt;
#endif
}
} // namespace JySockets
