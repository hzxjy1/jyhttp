module;
#include <arpa/inet.h>
#include <netinet/in.h>
#include <unistd.h>
#include <iostream>
#include <optional>
#include <ostream>
#include <string>
#include "jyhttp.hpp"


export module JySockets;

export namespace JySockets {
class POSIXSocket : public Socket {
 public:
  POSIXSocket();
  ~POSIXSocket();
  const SOCKET_FD CreateSocket() override;
  std::string GetRawText() override;
  bool WriteOut() override;

 private:
  SOCKET_FD serverSocket;
  sockaddr_in serverAddress;
};

POSIXSocket::POSIXSocket() {}
POSIXSocket::~POSIXSocket() {
  close(serverSocket);
}

const SOCKET_FD POSIXSocket::CreateSocket() {
  serverSocket = socket(AF_INET, SOCK_STREAM, 0);

  serverAddress.sin_family = AF_INET;
  serverAddress.sin_port = htons(8080);
  serverAddress.sin_addr.s_addr = INADDR_ANY;

  int i = bind(serverSocket, reinterpret_cast<sockaddr*>(&serverAddress),
               sizeof(serverAddress));
  std::cout << i << std::endl;
  listen(serverSocket, 5);
  int clientSocket = accept(serverSocket, nullptr, nullptr);

  char buffer[1024] = {0};
  recv(clientSocket, buffer, sizeof(buffer), 0);
  std::cout << "Message from client: " << buffer << std::endl;

  std::cout << "Create socket" << std::endl;
  return 1;
}

std::string POSIXSocket::GetRawText() {
  return "std::optional<std::string>()";
}

bool POSIXSocket::WriteOut() {
  return false;
}

std::optional<Socket*> GetSocket() {
#if defined(__linux__)
  return new POSIXSocket();
#elif defined(__APPLE__) && defined(__MACH__)
  return new POSIXSocket();
#elif defined(_WIN32) || defined(_WIN64)
  return std::nullopt;
#else
  return std::nullopt;
#endif
}
}  // namespace JySockets
